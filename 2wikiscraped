import wikipediaapi
import pandas as pd
from bs4 import BeautifulSoup
import requests
import re
from datetime import datetime

def get_event_on_date(date):
    events = []

    wiki_wiki = wikipediaapi.Wikipedia(language='en', user_agent='TimeTravelPakistan')
    page = wiki_wiki.page('Timeline_of_Pakistani_history')

    if page.exists():
        lines = page.text.split('\n')
        current_year = None
        for line in lines:
            if re.match(r'^\d{4}$', line.strip()):
                current_year = line.strip()
            elif line.startswith(date):
                if re.search(r'\d{4}', line) is None and current_year is not None:
                    event = line.replace(date + ': ', '')
                    events.append(f"{date} {current_year}: {event}")
                else:
                    year_match = re.search(r'\d{4}', line)
                    if year_match:
                        year = year_match.group(0)
                        event = line.replace(date + ': ', '').strip()
                        event = re.sub(r'^' + date + ' ', '', event)
                        event = re.sub(r'^:', '', event).strip() 
                        event = re.sub(r'^' + date.split()[1] + ' ', '', event)  
                        event = re.sub(r'^\s+', '', event) 
                        if event.startswith(year): 
                            event = event.replace(year, '', 1).strip() 
                        event = re.sub(r'^:', '', event).strip()  
                        events.append(f"{date} {year}: {event}")

    url = "https://en.wikipedia.org/wiki/Timeline_of_Pakistani_history"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    tables = pd.read_html(url)

    for table in tables:
        if 'Date' in table.columns:
            for index, row in table.iterrows():
                if row['Date'] == date:
                    event = re.sub(r'\[\d+\]', '', row['Event']) 
                    events.append(f"{row['Date']} {row['Year']}: {event}")

    return events

def convert_date_format(date):
    date_object = datetime.strptime(date, "%m/%d")
    return date_object.strftime("%-d %B")

date = input("Enter a date in MM/DD format: ")
date_converted = convert_date_format(date)


date_input = date
month, day = map(int, date_input.split('/'))
date_formatted = datetime(year=1, month=month, day=day).strftime('%B_%d')

url = 'https://en.wikipedia.org/wiki/' + date_formatted

response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

events = {'Births': [], 'Deaths': [], 'Events': []}
unique_events = set()
for section in events.keys():
    section_content = soup.find('span', {'id': section}).parent.find_next_siblings(['ul', 'ol'])
    for ul in section_content:
        if ul.find_previous_sibling().name == 'h2':
            break
        for li in ul.find_all('li'):
            if 'Pakistan' in li.text and li.text not in unique_events:
                split_text = re.split(' â€“ | : ', li.text.strip(), 1)
                year = split_text[0].strip()
                description = re.sub(r'\[\d+\]', '', split_text[1]).strip() if len(split_text) > 1 else ""
                formatted_date = f"{day} {datetime(year=int(year), month=month, day=1).strftime('%B')} {year}"
                if '(b.' in description:
                    events['Deaths'].append(f"{formatted_date}: Death of {description}")
                elif section == 'Births':
                    events[section].append(f"{formatted_date}: Birth of {description}")
                else:
                    events[section].append(f"{formatted_date}: {description}")
                unique_events.add(li.text)

events_2 = get_event_on_date(date_converted)

for category, items in events.items():
    if items:
        for item in items:
            print(item)

if events_2:
    for event in events_2:
        print(event)
