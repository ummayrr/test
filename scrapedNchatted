from bs4 import BeautifulSoup
import requests
import re
import calendar
import wikipediaapi
import pandas as pd
from datetime import datetime
import asyncio
import os
from sydney import SydneyClient

os.environ["BING_COOKIES"] = "SnrOvr=X=rebateson;SRCHUSR=DOB=20231211&T=1707839861000&POEX=W;_Rwho=u=d;ai_session=NcdY+LRYJDszVPNJQh9ZMB|1707841281939|1707841281939;GC=wxjrFt3ZJps7_GZHesgRx7VHbIZL5VKc0zZMoxHMJ_Ljcnsl2bqILFnF4TFoD2WE26K6-qqMhpHkIOI4Gz_MWQ;SRCHHPGUSR=SRCHLANG=en&IG=2F93FEA1B5274B4BB608DE6D7654B863&PV=15.0.0&BRW=XW&BRH=M&CW=1488&CH=708&SCW=1488&SCH=112&DPR=1.3&UTC=300&DM=1&HV=1707841285&WTS=63837887082&PRVCW=1488&PRVCH=708&CIBV=1.1573.3&EXLTT=31&cdxtone=Precise&cdxtoneopts=&cdxtoneopts=&cdxtoneopts=h3imaginative,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3precise,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3imaginative,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3precise,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3imaginative,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3precise,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3imaginative,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3precise,clgalileo,gencontentv3,fluxmemcst&cdxtoneopts=h3imaginative,clgalileo,gencontentv3&cdxtoneopts=h3imaginative,clgalileo,gencontentv3&cdxtoneopts=h3precise,clgalileo,gencontentv3&cdxtoneopts=h3precise,clgalileo,gencontentv3&cdxtoneopts=galileo,saharagenconv5&cdxtoneopts=galileo,saharagenconv5&cdxtoneopts=h3imaginative,clgalileo,gencontentv3&cdxtoneopts=h3imaginative,clgalileo,gencontentv3&cdxtoneopts=h3precise,clgalileo,gencontentv3&SPLSCR=1&THEME=1&BZA=0&cdxupdttm=638427981805432640&cdxts=1;ANON=A=292DFC5847B8B9B59EAA9213FFFFFFFF&E=1cdf&W=1;BCP=AD=1&AL=1&SM=1&CS=M;_SS=SID=00F8CF82EAB5698F114EDBA6EBDE68C3&R=1337&RB=1337&GB=0&RG=0&RP=1337;ipv6=hit=1707843465243&t=4;_U=1yc_cF8B7HvNNOU_sUg8tLMS3kGyATu4801f2n9F-snTwkrJBomitTFrwWec6iLV3W-UHGChhAu8rt4sKtm_2abbutb5JUoOI0zg9eqs7CRH3a-rhkBhImEEpSRTHI_iTUnxr6QzfnFzcBPwqCXvWpsRE-Bv_ytFxnswMP9-wW_SXmX0MvfLIN_jZlTaAhDDkLDlm0wsbbFTvIZpCJTHdWg;SRCHD=AF=NOFORM;PPLState=1;_EDGE_V=1;NAP=V=1.9&E=1c85&C=OjvQiVBB19tdhOTbBQk7YRkEbOoVMGvLu-gC_u6by9bq6ZrfgrV3fA&W=1;_RwBf=r=1&ilt=1&ihpd=1&ispd=0&rc=1337&rb=1337&gb=0&rg=0&pc=1337&mtu=0&rbb=0.0&g=0&cid=&clo=0&v=4&l=2024-02-13T08:00:00.0000000Z&lft=0001-01-01T00:00:00.0000000&aof=0&o=0&p=bingcopilotwaitlist&c=MY00IA&t=3151&s=2023-02-18T11:15:25.7326027+00:00&ts=2024-02-13T16:21:23.7748935+00:00&rwred=0&wls=2&wlb=0&wle=0&ccp=0&lka=0&lkt=0&aad=0&TH=&W=1&mta=0&e=8FEhAWg1M3cN_2IA5v3Wx7qqqA-pe2NjLOp1bCNV_nJ-vjJQbLsy_bthS5FZaEKaIfEgXgijGVDdpQytJngND5H5byWaHgctO7cKR_gW8Yg&A=&ard=0001-01-01T00:00:00.0000000&rwdbt=2024-01-30T21:56:30.3220389-08:00&rwflt=2024-02-10T22:40:47.3531803-08:00;_UR=QS=0&TQS=0;_EDGE_S=SID=00F8CF82EAB5698F114EDBA6EBDE68C3;MUIDB=19E4B74D897460C91843A4C888AF618D;USRLOC=HS=1&ELOC=LAT=33.58909225463867|LON=73.10842895507812|N=Rawalpindi%2C%20Punjab|ELT=6|;_HPVN=CS=eyJQbiI6eyJDbiI6MjYsIlN0IjowLCJRcyI6MCwiUHJvZCI6IlAifSwiU2MiOnsiQ24iOjI2LCJTdCI6MCwiUXMiOjAsIlByb2QiOiJIIn0sIlF6Ijp7IkNuIjoyNiwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyNC0wMi0xM1QwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIlRucyI6MCwiRGZ0IjpudWxsLCJNdnMiOjAsIkZsdCI6MCwiSW1wIjoxMzIsIlRvYm4iOjB9;ABDEF=V=13&ABDV=13&MRNB=1707324730984&MRB=0;CDXTC=cdxtone=Precise&cdxtoneopts=h3precise,clgalileo,gencontentv3;EDGSRCHHPGUSR=CIBV=1.1573.3&udstone=Precise&udstoneopts=h3precise,flxegctxv3,egctxcplt&udsts=1;KievRPSSecAuth=FABCBBRaTOJILtFsMkpLVWSG6AN6C/svRwNmAAAEgAAACLdW82xu/LJSAATRuozttCb4UcXukvoFzHZFu5nDqGri1GyvSosJnowXCzSyHIZi+2oXvAnljZ2h5wKiAqpKSobEHSm+FHTUKp6PA4rzqWqOtgnF7x3ouD2VJJ0bt6OBwCqALrAba7wrx7yRYul1IrcgAFkSlUo/k/NX3WCEadPGJpk2mrnDxC56Ymu/jgh65K58tycd1HhSFRMV2jvQdvtnoXvNXu1+mwCGYKUZZaFyqeO0h5/r5P0vJHIrbuQWJfo1OF542/o+4xoNttpSz+FHG/pv43ZjFzFi7RU+FC1Ad2gg+4S+AGqA0PbArMv+i9pV4R++4w3al44PmXKYl/IbPRYBkyIExK7YinpJoCDnTuCr6aQ/a90rfblg2ejUhI789DYLJUkztLpl/Sq9K/Zursep0nNKp4344DJhzYumYkw1CPrasatqv5ayE80EQo/m/1NVsIsBbTXV9GskZPL/ZIzwLzQ72fsoklMDWiwkalMxB/wzni8rTpdLzttJ9q/x7DxsLFC2wwZOpUdWT/VKxUOrb31DO+A5gNV+3xSRAUOBIFcslcXJrsLWUSlwpQg/a5YmEtPqBLugStGLb85hSx0RHvi+FNmKi+Lo1VEkcOG3+myjX6Ur8REJOLamPikDOcJDBgwOFR70udW487NfHOmI86l7GTED8feICX8XPq+6QdHXCR8VItRViDVEdr3HyDeKsfV9l8I5LvGgxzPHt3+Xecztyf6rGRZseLGtkwibgtFzF8cR0njw0e3ao9jddKJm5djqV/qYkf5UAC9ESRVmeYv4WcLBeB+jNiStj37WeJlE3MTFvGw+mdlB6nZUaFLxEYJJ950je7/baM8bgGhdUHQzJST1bQQu9gosbfDH5T0p8//i3vwCaT0EDvn4DB6J2XcFbV7vZb9XWtOQWMoDuykHVC4N/AaJIEeGI2lKwn+XiOlGmEkI4zaIRybdhJkhfjRss/afoUxltKLlbN4/wDLQk667wKm2DN/UQBFvndvDTKmFmh/XmdnWx4Ef1ui1d+0or4fNZNSX5RyndkvtFJ7o8UFBmUcDmx10DxK0UPnpliluD1pFpb1/BcqxMhpeVa7gL6dMO5a+7/LeHqtMtX9qA0KJy+y1djhY/Kp66NuhT1O5Ap2pQihMQt+Rl1qO1PghvS9ZZA3a296yiqfUuklO+Hu9g+X9X4lz1tLPBJESWrgJ/190qaTLlkbrp6bYi1QrLOfT4UJuxtAx7TjCxzoE1AaAwfS1sw8vyWiZRyzeRZWK/K1ovglVg3HEW9htfPtEo44VHFSowsoou9Pt+rU6tqY+/QsBPG6fcipOZMnmm2DrM+XoNUsp4nx4650+j5wh5X1hfT+Zbw1h7IkwydHn7wBWFACC7POFe8tYEenRUJH4HWH6NauBKA==;MMCASM=ID=6AB68D753F094B49A6E7ECFCC952BB35;MUID=19E4B74D897460C91843A4C888AF618D;SRCHUID=V=2&GUID=AF53A8D97FE74580B3621F85E07D6436&dmnchg=1;WLS=C=f7f012d4aafa4b41&N=Umair"


def get_event_on_date(date):
    events = []
    wiki_wiki = wikipediaapi.Wikipedia(language='en', user_agent='TimeTravelPakistan')
    page = wiki_wiki.page('Timeline_of_Pakistani_history')

    if page.exists():
        lines = page.text.split('\n')
        current_year = None
        for line in lines:
            if re.match(r'^\d{4}$', line.strip()):
                current_year = line.strip()
            elif line.startswith(date):
                if re.search(r'\d{4}', line) is None and current_year is not None:
                    event = line.replace(date + ': ', '')
                    events.append(f"{date} {current_year}: {event}")
                else:
                    year_match = re.search(r'\d{4}', line)
                    if year_match:
                        year = year_match.group(0)
                        event = line.replace(date + ': ', '').strip()
                        event = re.sub(r'^' + date + ' ', '', event)
                        event = re.sub(r'^:', '', event).strip() 
                        event = re.sub(r'^' + date.split()[1] + ' ', '', event)  
                        event = re.sub(r'^\s+', '', event) 
                        if event.startswith(year): 
                            event = event.replace(year, '', 1).strip() 
                        event = re.sub(r'^:', '', event).strip()  
                        events.append(f"{date} {year}: {event}")

    url = "https://en.wikipedia.org/wiki/Timeline_of_Pakistani_history"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    tables = pd.read_html(url)

    for table in tables:
        if 'Date' in table.columns:
            for index, row in table.iterrows():
                if row['Date'] == date:
                    event = re.sub(r'\[\d+\]', '', row['Event']) 
                    events.append(f"{row['Date']} {row['Year']}: {event}")

    return events

def convert_date_format(date):
    date_object = datetime.strptime(date, "%m/%d")
    return date_object.strftime("%-d %B")

date = input("Enter a date in MM/DD format: ")
date_converted = convert_date_format(date)

# Scraper 1
month, day = date.split('/')
month = calendar.month_name[int(month)].lower()
url = f"https://www.espncricinfo.com/on-this-day/cricket-events/{month}/{day}"
date2 = f"{day} {month.capitalize()}"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
divs = soup.find_all('div')
unique_div_texts = set()
events_1 = []

for i, div in enumerate(divs):
    text = div.text.strip()
    if len(text) >  1350:
        continue
    if re.match(r'^\d{4}', text):
        lower_text = text.lower()
        if 'pakistan' in lower_text:
            count_pakistan = lower_text.count('pakistan')
            if not (count_pakistan == 1 and ('against pakistan' in lower_text or 'over pakistan' in lower_text or 'and a tour to pakistan' in lower_text or 'against a rather modest' in lower_text or 'caught short by pakistan' in lower_text or 'played three three tests for england in pakistan' in lower_text or 'england a squad to tour pakistan' in lower_text or 'with pakistan bowlers dropping' in lower_text or 'after nazar mohammad of pakistan' in lower_text or 'return to the side in 2015' in lower_text or 'famous test win over pakistan in harare' in lower_text or 'ending pakistan' in lower_text or 'conquered pakistan' in lower_text or re.search(r'against .* and pakistan', lower_text) or re.search(r'against .*, pakistan', lower_text) or re.search(r'against .*, and pakistan', lower_text) or re.search(r'against .*, .*, and pakistan', lower_text) or re.search(r'against .*, .*, .*, and pakistan', lower_text))):
                if text not in unique_div_texts:
                    text = text.replace('\n', ' ')
                    year = re.search(r'\b\d{4}\b', text).group()
                    formatted_text = text.replace(year, '',  1).strip()
                    events_1.append(f"{date2} {year}: {formatted_text}")
                    unique_div_texts.add(text)

# Scraper 2
events_2 = get_event_on_date(date_converted)

# Scraper 3
date_input = date
month, day = map(int, date_input.split('/'))
date_formatted = datetime(year=1, month=month, day=day).strftime('%B_%d')
url = 'https://en.wikipedia.org/wiki/' + date_formatted
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
events_3 = {'Births': [], 'Deaths': [], 'Events': []}
unique_events = set()

for section in events_3.keys():
    section_content = soup.find('span', {'id': section}).parent.find_next_siblings(['ul', 'ol'])
    for ul in section_content:
        if ul.find_previous_sibling().name == 'h2':
            break
        for li in ul.find_all('li'):
            if 'Pakistan' in li.text and li.text not in unique_events:
                split_text = re.split(' â€“ | : ', li.text.strip(), 1)
                year = split_text[0].strip()
                description = re.sub(r'\[\d+\]', '', split_text[1]).strip() if len(split_text) > 1 else ""
                formatted_date = f"{day} {datetime(year=int(year), month=month, day=1).strftime('%B')} {year}"
                if '(b.' in description:
                    events_3['Deaths'].append(f"{formatted_date}: Death of {description}")
                elif section == 'Births':
                    events_3['Births'].append(f"{formatted_date}: Birth of {description}")
                else:
                    events_3['Events'].append(f"{formatted_date}: {description}")
                unique_events.add(li.text)

# combining all events
all_events = events_1 + events_2 + [item for sublist in events_3.values() for item in sublist]

events_dict = {}

for event in all_events:
    date_year, description = event.split(": ", 1)
    if date_year in events_dict:
        if len(description.split()) < len(events_dict[date_year].split()):
            events_dict[date_year] = description
    else:
        events_dict[date_year] = description

events = [f"{date_year}: {description}" for date_year, description in events_dict.items()]

async def main() -> None:
  # Delete existing text files
  for i in range(1, 21):
    if os.path.exists(f'text{i}.txt'):
      os.remove(f'text{i}.txt')
    if os.path.exists(f'text{i}original.txt'):
      os.remove(f'text{i}original.txt')

  async with SydneyClient(style="precise") as sydney:
    await sydney.reset_conversation(style="precise")
    question = "Optimize the text for an instagram post, add a little background after the heading with interesting information in simple words. Heading should only include the date, followed by a colon. Do not add any emotions, only facts. Text: "  
    question2 = "Optimize the text for an instagram post, make the text a little simpler, add any useful info and you can cut useless info. There should be heading before. Heading should only include the date, followed by a colon. Do not add any emotions, only facts. Text: "
    image_prompt_base_text = "Optimize this text into a prompt to get relevant images from a search engine. If 'birth of' or 'death of' is mentioned in text, do not include that, instead include only person's name and one profession only for 'birth of' and 'death of' events. Remove any useless information. If it cricket related, the prompt should be about event itself. Do not write anything other than the prompt in your response. Text: "

    for i, event in enumerate(events, start=1):
        if event in events_1:
            question_to_ask = question2 + event
        else:
            question_to_ask = question + event
        image_prompt = image_prompt_base_text + event
        await sydney.reset_conversation(style="precise")
        image_prompt_response = await sydney.ask(image_prompt, citations=False)
        with open(f'text{i}original.txt', 'w') as f:
            f.write(image_prompt_response)
        await sydney.reset_conversation(style="precise")
        response = await sydney.ask(question_to_ask, citations=False)
        response = re.sub(r'\[\^.\^\]', '', response)
        response = response.replace('**', '')
        response = 'ðŸ“… ' + response
        with open(f'text{i}.txt', 'w') as f:
            f.write(response)
        print(response, end="", flush=True)
        print("\n")
    await sydney.close_conversation()

if __name__ == "__main__":
    asyncio.run(main())
